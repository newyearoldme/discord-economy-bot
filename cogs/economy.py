import discord
from discord import option
from discord.ext import commands

from utils import crud


class Economy(discord.Cog):
    def __init__(self, bot):
        self.bot = bot

    @discord.slash_command(description="–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –í–∞—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    async def register(self, ctx: discord.ApplicationContext):
        user_in_db = await crud.get_user(ctx.author.id)
        if not user_in_db:
            await crud.create_user(ctx.author.id)
            await ctx.respond("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!", ephemeral=True)
        else:
            await ctx.respond("‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", ephemeral=True)

    @discord.slash_command(description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –í–∞—à –±–∞–ª–∞–Ω—Å")
    async def balance(self, ctx: discord.ApplicationContext):
        balance = await crud.get_balance(ctx.author.id)

        if balance is None:
            await ctx.respond("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/register`", ephemeral=True)
        else:
            await ctx.respond(f"–£ –í–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ ${balance}", ephemeral=True)

    @discord.slash_command(description="90% —à–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å $100-500, 10% –ø–æ—Ç–µ—Ä—è—Ç—å –≤—Å—ë")
    @commands.cooldown(1, 10, commands.BucketType.user)
    async def add_money(self, ctx: discord.ApplicationContext):
        result, value = await crud.add_money(ctx.author.id)

        match result:
            case "not_registered":
                await ctx.respond("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/register`", ephemeral=True)
            case "success":
                await ctx.respond(f"‚úÖ –í–∞–º –ø–æ–≤–µ–∑–ª–æ, –Ω–∞ –≤–∞—à —Å—á—ë—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ ${value}", ephemeral=True)
            case "reset":
                await ctx.respond("üíÄ –ù–µ—É–¥–∞—á–∞! –í–∞—à —Å—á—ë—Ç –æ–±–Ω—É–ª—ë–Ω...", ephemeral=True)

    @discord.slash_command(description="–ò—Å–ø—ã—Ç–∞–π—Ç–µ —É–¥–∞—á—É, –ª–∏–±–æ –í–∞—à —Å—á—ë—Ç —É–¥–≤–∞–∏–≤–∞–µ—Ç—Å—è, –ª–∏–±–æ –æ–±–Ω—É–ª—è–µ—Ç—Å—è!")
    async def all_in(self, ctx: discord.ApplicationContext):
        result, balance = await crud.all_in(ctx.author.id)

        match result:
            case "not_registered":
                await ctx.respond("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/register`", ephemeral=True)
            case "zero_balance":
                await ctx.respond("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å all in –ø—Ä–∏ –Ω—É–ª–µ–≤–æ–º –±–∞–ª–∞–Ω—Å–µ", ephemeral=True)
            case "success":
                await ctx.respond(f"‚úÖ –í–∞–º –ø–æ–≤–µ–∑–ª–æ, –í–∞—à —Å—á—ë—Ç —É–¥–≤–æ–∏–ª—Å—è, —Ç–µ–ø–µ—Ä—å –æ–Ω —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${balance}", ephemeral=True)
            case "reset":
                await ctx.respond("üíÄ –ù–µ—É–¥–∞—á–∞! –í–∞—à —Å—á—ë—Ç –æ–±–Ω—É–ª—ë–Ω...", ephemeral=True)

    @discord.slash_command(description="–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    @option("value", description="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏", input_type=int, min_value=1)
    async def transfer_money(self, ctx: discord.ApplicationContext, user: discord.User, value: int):
        if user.bot:
            await ctx.respond("‚ùå –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–µ–Ω—å–≥–∏ –±–æ—Ç—É!", ephemeral=True)
            return
        
        if user.id == ctx.author.id:
            await ctx.respond("‚ùå –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–µ–Ω—å–≥–∏ —Å–∞–º–æ–º—É —Å–µ–±–µ!", ephemeral=True)
            return

        success = await crud.transfer_money(ctx.author.id, user.id, value)

        if not success:
            await ctx.respond("‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥. –í–æ–∑–º–æ–∂–Ω–æ, –æ–¥–∏–Ω –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤", ephemeral=True)
            return

        await ctx.respond(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–ª–∏ ${value} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.mention}", ephemeral=True)

def setup(bot: discord.Bot):
    bot.add_cog(Economy(bot))
